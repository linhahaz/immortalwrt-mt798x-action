name: Build OpenWrt

on:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

env:
  REPO_URL: https://github.com/padavanonly/immortalwrt-mt798x-24.10
  REPO_BRANCH: 2410
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: false
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    - name: Checkout Source Code
      uses: actions/checkout@v4

    - name: Set up Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y --no-install-recommends \
          build-essential ccache curl git unzip wget \
          python3 python3-pip rsync libncurses5-dev zlib1g-dev gawk \
          gettext openssl libssl-dev xsltproc time \
          python3-distutils python3-setuptools
        sudo timedatectl set-timezone "$TZ"

    - name: Clone OpenWrt Source
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load Custom Feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update Feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install Feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load Custom Configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: Download Packages
      run: |
        cd openwrt
        make defconfig
        make download -j$(nproc)
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile Firmware
      run: |
        cd openwrt
        make -j$(nproc) || make -j1 V=s
        DEVICE_NAME=$(grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/')
        if [[ -z "$DEVICE_NAME" ]]; then
          echo "DEVICE_NAME=unknown" >> $GITHUB_ENV
        else
          echo "DEVICE_NAME=_${DEVICE_NAME}" >> $GITHUB_ENV
        fi
        echo "FILE_DATE=_$(date +%Y%m%d%H%M)" >> $GITHUB_ENV

    - name: Check Disk Space
      run: df -hT

    - name: Upload Bin Directory
      uses: actions/upload-artifact@v3.1.2
      if: env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize Files
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV

    - name: Upload Firmware Directory
      uses: actions/upload-artifact@v3.1.2
      if: env.UPLOAD_FIRMWARE == 'true'
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Upload to CowTransfer
      if: env.UPLOAD_COWTRANSFER == 'true'
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow ${FIRMWARE}

    - name: Upload to WeTransfer
      if: env.UPLOAD_WETRANSFER == 'true'
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet ${FIRMWARE}

    - name: Generate Release Tag
      if: env.UPLOAD_RELEASE == 'true'
      run: |
        echo "release_tag=$(date +'%Y.%m.%d-%H%M')" >> $GITHUB_ENV

    - name: Upload to GitHub Release
      uses: softprops/action-gh-release@v1
      if: env.UPLOAD_RELEASE == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.release_tag }}
        files: ${{ env.FIRMWARE }}/*

    - name: Configure GitHub Pages
      uses: actions/configure-pages@v4

    - name: Upload Pages Artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: openwrt/bin

    - name: Clean Old Workflow Runs
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 3

    - name: Clean Old Releases
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: env.UPLOAD_RELEASE == 'true'
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
